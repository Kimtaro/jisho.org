use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.15
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1172529004',
        'name' => 'words/index.tt',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    #line 1 "/Library/WebServer/Documents/denshijisho/root/words/index.tt"
    $stash->set(['c', 0, 'stash', 0, 'title', 0], 'Find words - Denshi Jisho');
    $output .=  "\n";
    #line 3 "/Library/WebServer/Documents/denshijisho/root/words/index.tt"
    $output .=  $context->include('header.tt');
    $output .=  "\n";
    #line 5 "/Library/WebServer/Documents/denshijisho/root/words/index.tt"
    $output .=  $context->include('words/form.tt');
    $output .=  "\n\n<div class=\"text_block\">\n   <h2>Search tips</h2>\n   \n   <p>\n	   <ul id=\"tips\">\n   		<li><b>Automatic conversion</b> from roman characters to kana.</li>\n   		<li><b>Bundle search terms</b> with quotation marks (\") to search for phrases. Like this: \"to eat\"</li>\n   		<li><b>Use Japanese and English</b> in the same query to make your search more precise.</li>\n   		<li><b>Use the wildcards</b> * (zero or more characters) and ? (exactly one character).</li>\n   		<li><b>English or Japanese input mode</b> doesn't matter. Asterisks, question marks, spaces and quotation marks work from both input modes.</li>\n   		<li><b>Hover over a Japanese word</b> with kanji when viewing the result of a word search to show a larger version.</li>\n   	</ul>\n	</p>\n</div>\n";
    #line 22 "/Library/WebServer/Documents/denshijisho/root/words/index.tt"
    $output .=  $context->include('footer.tt');
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
